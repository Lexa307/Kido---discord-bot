const Discord = require(`discord.js`);
const mysql   = require("mysql");
require('dotenv').config();
const moment  = require("moment");
const client  = new Discord.Client();
const price   = process.env.PRICE;
const guildid = process.env.GUILD_ID;
const prefix  = process.env.PREFIX;
moment.locale("ru");
// const server_name = 'KABO?';
// const voiceNow = new Set();
// const daily = new Set();
const voice = { };
let pinganswers = ["–æ—Ç–≤–∞–ª–∏ –æ—Ç –º–µ–Ω—è!","—Ç—ã —Ç—É–ø–æ–π?","—Ç—ã –∏–¥–∏–æ—Ç!","—è –≤—ã—Ä–µ–∂—É —Ç–µ–±–µ –≤—Å–µ –æ—Ä–≥–∞–Ω—ã!","—Ç—ã –Ω–µ –≤–∏–¥–∏—à—å —Ç–æ —á—Ç–æ —è –∑–∞–Ω—è—Ç–∞?","–ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —è —Ç–µ–±—è –∑–∞–±–∞–Ω—é!","—Ç—ã –º–µ–Ω—è –∑–ª–∏—à—å!"]
const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password:  process.env.DB_PASSWORD,
  database:  process.env.DB_NAME,
  port: process.env.DB_PORT
});

pool.connect(err => {
        if (err) throw err;
  console.log("–°onnected to database")
})

// FUNCTIONS

const random = function(min, max) {
    var rand = min + Math.random() * (max + 1 - min);
    rand = Math.floor(rand);
    return rand;
  }
const error = function(desc) {
	return new Discord.RichEmbed().setColor("RED").setDescription(":x: "+desc);
}

const clear = function(str) {
    return str.replace(/(['`', "`"])/g, "\\$1")
}
// FUNCTIONS

client.on('ready', () => {
	console.log("Ready");
	client.generateInvite().then(i => console.log(i));
	
	function randomStatus() {
	let stars = 0;
	let gifts = 0;
	pool.query(`SELECT * FROM users`, (err, rows) => {
		rows.forEach(row => {
			stars = stars + row.money;
			gifts = gifts + row.gifts;
		})
	})
        let status = [`–æ—Ä–±–∏—Ç—É üåç | ${stars} üåü`, `–æ—Ä–±–∏—Ç—É üåç | ${gifts} üéÅ`];
        let rstatus = Math.floor(Math.random() * status.length);
        client.user.setActivity(status[rstatus], {type: 'STREAMING', url: 'https://twitch.tv/.'});
    }; setInterval(randomStatus, 60000)

	pool.query(`SELECT * FROM users`, (err, rows) => {
		rows.forEach(row => {
			if(!row) return;
			if(row.private === null) return;
			console.log(row);
			let roles = JSON.parse(row.private);
			let date = roles.role.to;
			let nowd = Date.now();
			if(date - nowd < 0) { //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –ª–∏—á–Ω—É—é —Ä–æ–ª—å
				client.channels.get('563733138715443240').send("–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Ä–æ–ª—å –∏—Å—á–µ—Ä–ø–∞–Ω–∞"); //—Ç—É—Ç –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥ —Å–µ–±—è
				client.guilds.get(guildid).members.get(row.id).removeRole(roles.role.id)
			}
		})
	})

	setInterval( () => {
		 pool.query(`SELECT * FROM users`, (err, rows) => {
                rows.forEach(row => {
                        if(!row) return;
                        if(row.private === null) return;
                        let roles = JSON.parse(row.private);
			if(roles.role.active === 'false') return;
                        let date = roles.role.to;
                        let nowd = Date.now();
                        if(date - nowd < 0) {
                                client.users.get(row.id).send("–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Ä–æ–ª—å –±—ã–ª–∞ —Å–Ω—è—Ç–∞, —Ç–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Å—Ä–æ–∫");
                                client.guilds.get(guildid).members.get(row.id).removeRole(roles.role.id)
				pool.query(`UPDATE users SET private = JSON_SET(private, '$.role.active', 'false') WHERE id = '${row.id}'`)
                        }
                })
        })

	}, 60000)
})

client.on('voiceStateUpdate', (old, member) => {
	if(member.voiceChannelID === null || member.selfMute === true) { //null - leaved from voice; selfMute - muted himself
		clearInterval(voice[member.user.id]); // stop recording voice;
		return; // stop alg;
	} else {
		if(member.selfMute === true) return; //ignore if muted himself;
		if(old.voiceChannelID === member.voiceChannelID) return; //ignore this channel updates - anti layering voice recording;
		voice[member.user.id] = setInterval( () => {
			pool.query(`SELECT * FROM users WHERE id = '${member.user.id}'`, (err, rows) => {
				if(!rows[0]) return; //ignore in not exits;
				//record 1 voice minute;
				pool.query(`UPDATE users SET voicem = ${rows[0].voicem + 1} WHERE id = '${member.user.id}'`);
				if(rows[0].voicem >= 60) {
				//record 1 voice hour, set voice minutes to 00;
					 pool.query(`UPDATE users SET voiceh = ${rows[0].voiceh + 1}, voicem = 0 WHERE id = '${member.user.id}'`);
					 if(rows[0].voiceh == 11) {
                                	//Every 12 hours member will get 1 gift;
                                	//Gift can drop a private role for 3/5/7 days | premium role for 7 days | 100-200 server currency;
                               	         	pool.query(`UPDATE users SET gifts = ${rows[0].gifts + 1} WHERE id = '${member.user.id}'`);
						member.user.send("–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 üéÅ –∑–∞ —Ç–æ —á—Ç–æ –ø—Ä–æ—Å–∏–¥–µ–ª–∏ –≤ –≤–æ–π—Å–µ –±–æ–ª–µ–µ 12 —á–∞—Å–æ–≤!");
                                	}
				}
			})
		}, 4000)
	}
})

client.on('message', message => {
/// UPDATE USER PROFILE
	pool.query(`SELECT * FROM users WHERE id = ${message.author.id}`, (err, rows) => {
		if(!rows[0]) { // Insert large json's with command usage and user inventory;
			pool.query(`INSERT INTO users (id, uses, inventory) VALUES ('${message.author.id}', '{"hug": 0, "kiss": 0, "bite": 0, "pat": 0, "smoke": 0, "beer": 0, "rip": 0, "shot": 0, "poke": 0, "slap": 0, "lick": 0, "coffee": 0, "sad": 0, "sex": 0}', '{"elite": 0, "private_3": 0,"private_5": 0, "private_7": 0}')`);
		} else {
			//let nxp    = rows[0].xp + random(1,15); //is it needed?
			let nmsg   = rows[0].messages      + 1;
			pool.query(`UPDATE users SET  messages = ${nmsg} WHERE id = ${message.author.id}`);
		}
	})
/// UPDATE USER PROFILE
})

client.on('message', message => {
	const args = message.content.slice(prefix.length).trim().split(/ +/g);
	const command = args.shift().toLowerCase();

	if(command === "embed") {
		let err = function (name, pass, ex, send) {
                if(!name) name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                let embed = new Discord.RichEmbed()
                .setColor("RED")
                .setTitle("ERROR")
                .addField('–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏', name, true);
                if(pass) { embed.addField('–†–µ—à–µ–Ω–∏–µ', pass, true) }
                if(ex) { embed.addField('–ü—Ä–∏–º–µ—Ä', ex, true) }
                if(send === false) {
                return embed;
                } else {
                return message.channel.send(embed).catch(err => message.channel.send("‚ö† | –í–Ω–∏–º–∞–Ω–∏–µ, –±–æ—Ç—É –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ `–í—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏` —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö"))
                }
        }
  try {
            let text = args.join(" ").replace(/\n/g, "\\n");
            let embed = new Discord.RichEmbed();
            let footer = text.match(/{footer:(.*?)( \| icon: ?(.*?))?}/i);
            if (footer !== null) {
                embed.setFooter(footer[1], footer[3])
            }
            let image = text.match(/{image: ?(.*?)}/i);
            if (image !== null) {
                embed.attachFile({
                    attachment: image[1],
                    file: image[1].substring(image[1].lastIndexOf('/') + 1)
                }).setImage('attachment://'+image[1].substring(image[1].lastIndexOf('/') + 1));
            }
            let thumb = text.match(/{thumbnail: ?(.*?)}/i);
            if (thumb !== null) {
                embed.attachFile({
                    attachment: thumb[1],
                    file: thumb[1].substring(thumb[1].lastIndexOf('/') + 1)
                }).setThumbnail('attachment://'+thumb[1].substring(thumb[1].lastIndexOf('/') + 1));
            }
            let author = text.match(/{author:(.*?)( \| icon: ?(.*?))?( \| url: ?(.*?))?}/i);
            if (author !== null) {
                embed.setAuthor(author[1], author[3], author[5])
            }
            let title = text.match(/{title:(.*?)}/i);
            if (title !== null) {
                embed.setTitle(title[1])
            }
            let url = text.match(/{url: ?(.*?)}/i);
            if (url !== null) {
                embed.setURL(url[1])
            }
            let description = text.match(/{description:(.*?)}/i);
            if (description !== null) {
                embed.setDescription(description[1].replace(/\\n/g, '\n'))
            }
            let color = text.match(/{colou?r: ?(.*?)}/i);
            if (color !== null) {
                embed.setColor(color[1])
            }
            let timestamp = text.match(/{timestamp(: ?(.*?))?}/i);
            if (timestamp !== null) {
                if (timestamp[2] === undefined || timestamp[2] === null)
                embed.setTimestamp(new Date());
                else
                embed.setTimestamp(new Date(timestamp[2]));
            }
            let fields = text.match(/{field: ?(.*?) \| value: ?(.*?)( \| inline)?}/gi)
            if (fields !== null) {
                fields.forEach((item) => {
                if (item[1] == null || item[2] == null || typeof item[1] === "undefined" || typeof item[2] === "undefined") return;
                let matches = item.match(/{field: ?(.*?) \| value: ?(.*?)( \| inline)?}/i);
                embed.addField(matches[1], matches[2].replace(/\\n/g, '\n'), (matches[3] != null));
            });}
            message.channel.send({embed});
            message.delete();
                message.author.send("–Ø –æ—Å—Ç–∞–≤–ª—é —ç—Ç–æ –∑–¥–µ—Å—å –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —à–∞–±–ª–æ–Ω..\n\n```"+args.join(" ")+"```").catch(err => message.channel.send("–Ø –Ω–µ —Å–º–æ–≥—É —Å–∫–∏–Ω—É—Ç—å –≤–∞–º —à–∞–±–ª–æ–Ω, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã"));
        } catch(e) {
            err("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embed —Å–æ–æ–±—â–µ–Ω–∏—è\n```"+e+"```", "–í–Ω–∏–º–∞–Ω–∏–µ, –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–µ–µ 256 —Å–∏–º–≤–æ–ª–æ–≤ –≤ TITLE –∏–ª–∏ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ FIELD, –æ–Ω–∏ —è–≤–ª—è—é—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –∞ –Ω–µ –º–µ—Å—Ç–∞–º–∏ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
            console.error(e);
        }

	}

	if(command === '—Å—Ç–∞—Ç—É—Å') {
		 pool.query(`SELECT * FROM users WHERE id = ${message.author.id}`, (err, rows) => {
			if(!rows[0]) return message.channel.send(err("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));
			let newDesc = clear(args.join(" "));
			if(!newDesc) return message.channel.send(error("–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"));
			if(newDesc.length > 100) return message.channel.send(error("–°—Ç–∞—Ç—É—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤"));
			pool.query(`UPDATE users SET description = '${newDesc}' WHERE id = ${message.author.id}`);
			message.channel.send("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω");
			message.delete();
		})
	}

	if (message.content.indexOf("<@566415015519846422>")>=0){
		message.channel.send(pinganswers[Math.floor(Math.random() * (pinganswers.length))]);//
	  }

	if(command === '–ø—Ä–æ—Ñ–∏–ª—å') {
	let ids;
						    let member;
						    ids = message.mentions.members.first()
						    if (ids) {
							    member = ids.user.id;
						    }
						    if (!ids) {
							    if(args[1]) { member = args[1] } else { member = args[0]; }
						    }
	    					   if(!args[0]) {
							   member = message.author.id;
						   }
	//can somebody remove this comment when we release that?
	//if(client.users.get(member).bot) return message.channel.send(error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ—Ç–æ–º"));

		pool.query(`SELECT * FROM users WHERE id = ${member}`, (err, rows) => {
			if(!rows[0]) return;
			let time_m = rows[0].voicem;
			let time_h = rows[0].voiceh;
			if(time_m < 9) time_m = '0'+time_m; //tvorim dich
			if(time_h < 9) time_h = '0'+time_h; //tvorim dich
			let time = `${time_h} —á. ${time_m} –º–∏–Ω.`; //tvorim dich
			let uses = JSON.parse(rows[0].uses); //command uses [json sheme]
			let status = client.users.get(member).presence.status; //game
			if(status == 'online') status = '–í —Å–µ—Ç–∏';
			if(status == 'idle') status = '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω';
			if(status == 'dnd') status = '–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å';
			if(status == 'offline') status = '–ù–µ –≤ —Å–µ—Ç–∏';
			let embed = new Discord.RichEmbed()
			.setThumbnail(client.users.get(rows[0].id).displayAvatarURL)
			.setTitle(`–ü—Ä–æ—Ñ–∏–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${client.users.get(rows[0].id).username}`)
			.addField(`üí∞ –í–∞–ª—é—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞`, `\nüëõ **–ë–∞–ª–∞–Ω—Å:** ${rows[0].money} ${price}\nüéÜ **–ü–æ–¥–∞—Ä–∫–∏:** ${rows[0].gifts}üéÅ`)
			.addField(`** **`, `\`\`\`–û–±–Ω—è–ª–∏: ${uses.hug}
–ü–æ—Ü–µ–ª–æ–≤–∞–ª–∏: ${uses.kiss}
–£–∫—É—Å–∏–ª–∏: ${uses.bite}
–ü–æ–≥–ª–∞–¥–∏–ª–∏: ${uses.pat}
–ü–æ–∫—É—Ä–∏–ª: ${uses.smoke}
–í—ã–ø–∏–ª –ø–∏–≤–∞: ${uses.beer}
–£–º–µ—Ä: ${uses.rip}
–ó–∞—Å—Ç—Ä–µ–ª–∏–ª–∏: ${uses.shot}
–¢—ã–∫–Ω—É–ª–∏: ${uses.poke}
–£–¥–∞—Ä–∏–ª–∏: ${uses.slap}
–õ–∏–∑–Ω—É–ª–∏: ${uses.lick}
–í—ã–ø–∏–ª –∫–æ—Ñ–µ: ${uses.coffee}
–ì—Ä—É—Å—Ç–∏–ª: ${uses.sad}
–ó–∞–Ω–∏–º–∞–ª–∏—Å—å —Å–µ–∫—Å–æ–º: ${uses.sex}\`\`\``) //–ø–æ—á–µ–º—É –º–Ω–µ —Ç–∞–∫ —Å–º–µ—à–Ω–æ
			.addField("** **", `üí° **–°—Ç–∞—Ç—É—Å:** ${status}\nüïõ **–ó–∞—à–µ–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä:** ${moment(message.guild.members.get(rows[0].id).joinedAt).fromNow()}\nüé§ **–ü—Ä–æ–±—ã–ª –≤ –≤–æ–π—Å–µ:** ${time}\nüí≠**–ù–∞–ø–∏—Å–∞–ª –°–æ–æ–±—â–µ–Ω–∏–π:** ${rows[0].messages}\n`)
			.addField("‚Ñπ –õ–∏—á–Ω—ã–π –°—Ç–∞—Ç—É—Å", '```'+rows[0].description+'```')
			.setColor("#36393F")
			message.channel.send(embed)
			message.delete();

		})
	}
	if(command === '—Ç–æ–ø') {
		pool.query(`SELECT * FROM users ORDER BY money DESC LIMIT 10`, (err, rows) => {
                        const embed = new Discord.RichEmbed();
                        embed.setTitle(":crown: –¢–æ–ø 10 –±–æ–≥–∞—á–µ–π —Å–µ—Ä–≤–µ—Ä–∞")
                        embed.setColor('GOLD')
                        for(i=0; i < rows.length; i++) { //leaderboard
                                const row = rows[i];
                                        embed.addField(`[ ${i+1} ] ${client.users.get(row.id).username} - \`${row.money} ‚≠ê\``, '** **');
                                }
			embed.setThumbnail("https://media.discordapp.net/attachments/563743093145337892/563766275575250973/tumblr_m6ync6F5YS1roozkr.gif");
                        message.channel.send(embed);
                })
	}
	if(command === '–æ—Ç–∫—Ä—ã—Ç—å') {
		/*let count = args[0];
		if(!count || isNaN(count) || count < 0) count = 1;
		 pool.query(`SELECT * FROM users WHERE id = '${message.author.id}'`, (err, rows) => {
			if(count > rows[0].figts) return message.channel.send(error("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–æ–±–æ–∫"));
		})
		for(i=0; i < count; i++) {*/ // Very bugged trash, dont touch.
			pool.query(`SELECT * FROM users WHERE id = '${message.author.id}'`, (err, rows) => {
				if(!rows[0]) return message.channel.send(error("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"));
				if(rows[0].gifts <= 0) return message.channel.send(error("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫"));
				let moneyr = random(100, 200);
				var arr = ['elite', 'p3', 'p5', 'p7', 'cash'];
				var gifted = Math.floor(Math.random() * arr.length);
				gifted = arr[gifted]; //I think I'm doing something wrong >_>
				pool.query(`UPDATE users SET gifts = ${rows[0].gifts - 1} WHERE id = '${message.author.id}'`);
				let i = JSON.parse(rows[0].inventory);
				let p3 = i.private_3 + 1; //private role for 3 days, fuck
				let p5 = i.private_5 + 1; //private role for 5 days, fuck
				let p7 = i.private_7 + 1; //private role for 7 days, fuck
				let e = i.elite + 1; //elite role for 7 days
				//console.log(gifted) //remove this when released, just watching the behavior of pseudo randomness
				//idea: –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –º–± —Ñ—É–Ω–∫—Ü–∏–µ–π, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ —Å—Ä–∞—Ç—å
				if(gifted === 'elite') {
					pool.query(`UPDATE users SET inventory = JSON_SET(inventory, "$.elite", ${e}) WHERE id = '${message.author.id}'`);
					message.channel.send("–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ–±–∫—É..").then(m => setTimeout( () => { message.channel.send("–ò–∑ –∫–æ—Ä–æ–±–∫–∏ –≤—ã–ø–∞–ª —Å—Ç–∞—Ç—É—Å —ç–ª–∏—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π, –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å") }, 5000));
				}
				if(gifted === 'p3') {
                                        pool.query(`UPDATE users SET inventory = JSON_SET(inventory, "$.private_3", ${p3}) WHERE id = '${message.author.id}'`);
                                        message.channel.send("–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ–±–∫—É..").then(m => setTimeout( () => { message.channel.send("–ò–∑ –∫–æ—Ä–æ–±–∫–∏ –≤—ã–ø–∞–ª–∞ –ª–∏—á–Ω–∞—è —Ä–æ–ª—å –Ω–∞ 3 –¥–Ω—è, –æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å") }, 5000));
                                }
				if(gifted === 'p5') {
                                        pool.query(`UPDATE users SET inventory = JSON_SET(inventory, "$.private_5", ${p5}) WHERE id = '${message.author.id}'`);
                                        message.channel.send("–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ–±–∫—É..").then(m => setTimeout( () => { message.channel.send("–ò–∑ –∫–æ—Ä–æ–±–∫–∏ –≤—ã–ø–∞–ª–∞ –ª–∏—á–Ω–∞—è —Ä–æ–ª—å –Ω–∞ 5 –¥–Ω–µ–π, –æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å") }, 5000));
                                }
				if(gifted === 'p7') {
                                        pool.query(`UPDATE users SET inventory = JSON_SET(inventory, "$.private_7", ${p7}) WHERE id = '${message.author.id}'`);
                                        message.channel.send("–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ–±–∫—É..").then(m => setTimeout( () => { message.channel.send("–ò–∑ –∫–æ—Ä–æ–±–∫–∏ –≤—ã–ø–∞–ª–∞ –ª–∏—á–Ω–∞—è —Ä–æ–ª—å –Ω–∞ 7 –¥–Ω–µ–π, –æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å") }, 5000));
                                }
				if(gifted === 'cash') {
                                        pool.query(`UPDATE users SET money = ${rows[0].money + moneyr} WHERE id = '${message.author.id}'`);
                                        message.channel.send("–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ–±–∫—É..").then(m => setTimeout( () => { message.channel.send(`–ò–∑ –∫–æ—Ä–æ–±–∫–∏ –≤—ã–ø–∞–ª–æ \`${moneyr}\` üåü`) }, 5000));
                                }

			})
		//} part of shit code
	}
	if(command === '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å') {
		pool.query(`SELECT * FROM users WHERE id = '${message.author.id}'`, (err, rows) => {
			if(!rows[0]) return message.channel.send(error("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"));
			let inv = JSON.parse(rows[0].inventory);
			const embed = new Discord.RichEmbed()
			.setTitle("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "+message.author.username)
			.addField("–õ–∏—á–Ω–∞—è —Ä–æ–ª—å –Ω–∞ 3 –¥–Ω—è", inv.private_3)
			.addField("–õ–∏—á–Ω–∞—è —Ä–æ–ª—å –Ω–∞ 5 –¥–Ω–µ–π", inv.private_5)
			.addField("–õ–∏—á–Ω–∞—è —Ä–æ–ª—å –Ω–∞ 7 –¥–Ω–µ–π", inv.private_7)
			.addField("–°—Ç–∞—Ç—É—Å —ç–ª–∏—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π", inv.elite)
			.addField("–ü–æ–¥–∞—Ä–∫–∏ üéÅ", rows[0].gifts, true)
			.addField("–í–∞–ª—é—Ç–∞ ‚≠ê", rows[0].money, true)
			.setColor("#3212A0")
			.setFooter(".inventory")
			message.channel.send(embed)

		})
	}
	// if(command === 'reset') { // PLEASE, DO > REMOVE THIS COMMAND WHEN RELEASED
	// 	pool.query('DELETE FROM users');
	// }
	// if(command === 'eval') { // PLEASE, DO > REMOVE THIS COMMAND WHEN RELEASED
	// 	eval(args.join(" "));
	// }
	if(command === '—Ä–æ–ª–∏') {
		pool.query(`SELECT * FROM users WHERE id = '${message.author.id}'`, (err, rows) =>{
			if(!rows[0]) return message.channel.send(error("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã"));
			let roles = JSON.parse(rows[0].private);
			const embed = new Discord.RichEmbed()
			.setTitle("–õ–∏—á–Ω—ã–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " +message.author.username)
			if(!roles) {
				embed.setDescription("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ª–∏—á–Ω—ã—Ö —Ä–æ–ª–µ–π");
			} else {
				embed.addField("–õ–∏—á–Ω–∞—è —Ä–æ–ª—å: "+message.guild.roles.get(roles.role.id).name, "–°–ø–∞–¥–∞–µ—Ç **"+moment(roles.role.to).format('LLLL')+'**');
			}
			embed.setColor("#3212A0");
			message.channel.send(embed)
		})
	}
	if(command === '–º–∞–≥–∞–∑–∏–Ω') {
		const embed = new Discord.RichEmbed()
		.setTitle("–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π")
		.setColor("#3212A0")
		pool.query(`SELECT * FROM shop`, (err, rows) => {
			if(!rows[0]) embed.setDescription("–†–æ–ª–µ–π –Ω–µ—Ç.");
			for(i=0;i<rows.length;i++) {
				row = rows[i];
				embed.addField(`[ ${row.itemid} ] ${row.item}`, `–¶–µ–Ω–∞: ${row.price}\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–æ–ª—å ${client.guilds.get(guildid).roles.get(row.id).name}`)
			}
		message.channel.send(embed)
		})
	}
	if(command === '–∫—É–ø–∏—Ç—å') {
		pool.query(`SELECT * FROM users WHERE id = '${message.author.id}'`, (err, rows) => {
			if(!rows[0]) return message.channel.send(error("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"));
			let item = args.join(" ");
			if(!item) return message.channel.send(error("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏"));
			pool.query(`SELECT * FROM shop WHERE item = '${item}'`, (err2, rows2) => {
				if(!rows2[0]) return message.channel.send(error("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));
				if(rows[0].money < rows2[0].price) return message.channel.send(error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ :star: –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"));
				if(message.member.roles.has(rows2[0].id) === true) return message.channel.send(error("–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å —É–∂–µ –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∞ –≤–∞–º–∏"));
				message.member.addRole(rows2[0].id).catch(err => message.channel.send(error(`–û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∏–º –æ—à–∏–±–∫—É –Ω–∏–∂–µ\n\`\`\`${err}\`\`\``)));
				pool.query(`UPDATE users SET money = ${rows[0].money - rows2[0].price} WHERE id = '${message.author.id}'`);
				message.channel.send(`–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ä–æ–ª—å ${client.guilds.get(guildid).roles.get(rows2[0].id).name}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π —Å–ø–∏–æ—Å–∫ —Ä–æ–ª–µ–π`);
			})
		})
	}

	if(command === '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å') {
		let item = args.join(" ");
		if(!item) return message.channel.send(error("–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"));
		pool.query(`SELECT * FROM users WHERE id = '${message.author.id}'`, (err, rows) => {
			if(item === 'elite') {
				const i = JSON.parse(rows[0].inventory);
				if(i.elite <= 0) return message.channel.send(error("–ü—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –∏–Ω–≤–µ—Ç–∞—Ä–µ"));
				if(message.member.roles.has('564339584989790228')) return message.channel.send(error("–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ —Å—Ç–∞—Ç—É—Å —ç–ª–∏—Ç—ã"));
				message.member.addRole('564339584989790228');
				//pool.query(`UPDATE users SET private = // –ï—Å–ª–∏ —á–µ—Å—Ç–Ω–æ, –∑–∞–±—ã–ª —á—Ç–æ —è —Ç—É—Ç –¥–µ–ª–∞–ª, –Ω–æ –≤–∏–¥–∞—Ç—å —É –º–µ–Ω—è —Ç—É—Ç –æ—á–µ–Ω—å –ø–æ–¥–≥–æ—Ä–µ–ª–æ.
				setTimeout( () => {
					message.member.removeRole('564339584989790228');
				}, 604800000)
			}
		})
	}
	//REACTIONS//
	//reaction template
	//idea: —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è —Å–º–æ–∂–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —ç—Ç–æ, –ø—Ä–∏–¥–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å 2, —Ç–∫ –Ω–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–æ–≤ :/
	if(command === '–æ–±–Ω—è—Ç—å') {
		let huged = message.mentions.users.first();
		if(!huged) return message.channel.send(error("–î–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å —á–µ–ª–æ–≤–µ–∫–∞"));
		pool.query(`SELECT * FROM users WHERE id = '${huged.id}'`, (err, rows) => {
			if(!rows[0]) return message.channel.send(error("–î–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"));
			let uses = JSON.parse(rows[0].uses);
			let neww = uses.hug+1; // ++ .-.
			pool.query(`UPDATE users SET uses = JSON_SET(uses, "$.hug", ${neww})`); //use this query for REACTION EDITS REEEEEEEEEEEEEEEEEEEEEEE
		})
	}
})//–¥–æ–ø–∏–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–∫–∞–º–∏

client.login(process.env.TOKEN)
